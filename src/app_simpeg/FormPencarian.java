package app_simpeg;
import java.awt.event.KeyEvent;
import objection.Pegawai;
//import objection.Golongan;
import java.util.ArrayList;
//import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
//import java.util.Collections;
//import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class FormPencarian extends javax.swing.JFrame {
    private final static int NOT_FOUND = -1;
    ArrayList<Pegawai> listPegawai = new ArrayList<>();
    public Statement st;
    public ResultSet rs;
    public DefaultTableModel tabModel;
    Connection cn = koneksi.Koneksi.Koneksi();
    
    public FormPencarian() {
        initComponents();
        setLocationRelativeTo(null);
        judul();
        loadData("");
        getListGolongan();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePegawai = new javax.swing.JTable();
        labelNip = new javax.swing.JLabel();
        inputNip = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        comboSortByName = new javax.swing.JComboBox<>();
        labelNip1 = new javax.swing.JLabel();
        comboGolongan = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Form Pencarian Pegawai");

        tablePegawai.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablePegawai);

        labelNip.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelNip.setText("NIP");

        inputNip.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputNip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNipActionPerformed(evt);
            }
        });
        inputNip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputNipKeyPressed(evt);
            }
        });

        jLabel4.setText("Sort By Nama");

        comboSortByName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Asc", "Desc" }));
        comboSortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSortByNameActionPerformed(evt);
            }
        });

        labelNip1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelNip1.setText("Pencarian Pegawai");

        comboGolongan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semua" }));
        comboGolongan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboGolonganActionPerformed(evt);
            }
        });

        jLabel5.setText("Golongan");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelNip)
                                .addGap(18, 18, 18)
                                .addComponent(inputNip, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(comboGolongan, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(comboSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelNip1)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelNip1)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(comboGolongan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(labelNip)
                    .addComponent(inputNip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboSortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSortByNameActionPerformed
        String sort = (String) comboSortByName.getSelectedItem();
        if(sort.equals("Asc")){
            selectionSortByName("ASC");
            loadTable();
        }else{
            selectionSortByName("DESC");
            loadTable();
        }        
    }//GEN-LAST:event_comboSortByNameActionPerformed

    private void inputNipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputNipActionPerformed

    private void comboGolonganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboGolonganActionPerformed
        selectionSortByGolongan();
        String search = (String) comboGolongan.getSelectedItem();
        tabModel.getDataVector().removeAllElements();
        if(comboGolongan.getSelectedIndex()!=0){
            for (int i = 0; i < listPegawai.size(); i++) {
                int indexValue = binarySearchByGolongan(listPegawai.get(i).getId_golongan(), search);
                if (indexValue != -1) {
                    Object[] data = {
                      listPegawai.get(i).getNip(),
                      listPegawai.get(i).getNama(),
                      listPegawai.get(i).getNo_telp(),
                      listPegawai.get(i).getAlamat(),
                      listPegawai.get(i).getJenkel(),
                      listPegawai.get(i).getId_golongan(),
                    };
                    tabModel.addRow(data);
                }
            }
        }else{
            loadTable();
        }
    }//GEN-LAST:event_comboGolonganActionPerformed

    private void inputNipKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputNipKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            selectionSortByNip();
            String search = inputNip.getText();
            tabModel.getDataVector().removeAllElements();
            for (int i = 0; i < listPegawai.size(); i++) {
                int indexValue = binarySearchByNip(listPegawai.get(i).getNip(), search);
                if (indexValue != -1) {
                    Object[] data = {
                      listPegawai.get(i).getNip(),
                      listPegawai.get(i).getNama(),
                      listPegawai.get(i).getNo_telp(),
                      listPegawai.get(i).getAlamat(),
                      listPegawai.get(i).getJenkel(),
                      listPegawai.get(i).getId_golongan(),
                    };
                    tabModel.addRow(data);
                }
            }
        }
    }//GEN-LAST:event_inputNipKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPencarian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPencarian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPencarian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPencarian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPencarian().setVisible(true);
            }
        });
    }

    private void reset(){
        // inputNip.setVisible(false);
        // labelNip.setVisible(false);
    }
    
    private void judul() {
        Object[] judul = {
          "NIP", "Nama", "No Telp", "Alamat", "Jenkel", "Golongan"
        };
        tabModel = new DefaultTableModel(null, judul);
        tablePegawai.setModel(tabModel);
    }
    
    private void loadData(String where) {
        try {
            st = cn.createStatement();
            tabModel.getDataVector().removeAllElements();
            tabModel.fireTableDataChanged();
            rs = st.executeQuery("SELECT * FROM t_pegawai " + where + " order by created_at desc");
            
            int i = 0;
            while (rs.next()) {
                Pegawai pgw = new Pegawai(
                    rs.getString("id_pegawai"), 
                    rs.getString("nip"), 
                    rs.getString("nama"), 
                    rs.getString("no_telp"),
                    rs.getString("alamat"),
                    rs.getString("id_golongan"),
                    rs.getString("jenkel"),
                    rs.getString("tahun_masuk"),
                    rs.getInt("gaji")  
                );
                listPegawai.add(pgw);
                i++;
            }
            
            loadTable(); // Load Table Data
        } catch(SQLException e) {
          JOptionPane.showMessageDialog(null, e);
        }
    }
    
    public void loadTable(){
        tabModel.getDataVector().removeAllElements();
        for(int i=0;i<listPegawai.size();i++){
            Object[] data = {
              listPegawai.get(i).getNip(),
              listPegawai.get(i).getNama(),
              listPegawai.get(i).getNo_telp(),
              listPegawai.get(i).getAlamat(),
              listPegawai.get(i).getJenkel(),
              listPegawai.get(i).getId_golongan(),
            };
            tabModel.addRow(data);         
        }
    }
    
    private void getListGolongan() {
        try {
            st = cn.createStatement();
            rs = st.executeQuery("SELECT id_golongan, kode_golongan, concat(kode_golongan, ' - ',keterangan) as golongan FROM t_golongan " +
                                 "order by kode_golongan asc  ");
            
            // order by CAST(id_golongan AS UNSIGNED) asc
            while (rs.next()) {
                comboGolongan.addItem(rs.getString("kode_golongan"));
            }
        } catch(SQLException e) {
          e.printStackTrace();
        }
    }
    
    public void selectionSortByNip(){
        listPegawai.clear();
        loadData("");
        String selectedValue;
        int j=0;
        int selectedIndex = 0;      
        for(int i=1;i<listPegawai.size();i++){
            selectedValue = listPegawai.get(i-1).getNip();
            selectedIndex = i-1;
            for(j=i;j<listPegawai.size();j++){
                if(listPegawai.get(j).getNip().compareTo(selectedValue) < 0){
                    selectedValue = listPegawai.get(j).getNip();
                    selectedIndex = j;
                }
            }
            //Swap
            swap(i-1, selectedIndex);
        }
    }
    
    public void selectionSortByGolongan(){
        listPegawai.clear();
        loadData("");
        String selectedValue;
        int j=0;
        int selectedIndex = 0;      
        for(int i=1;i<listPegawai.size();i++){
            selectedValue = listPegawai.get(i-1).getId_pegawai();
            selectedIndex = i-1;
            for(j=i;j<listPegawai.size();j++){
                if(listPegawai.get(j).getId_golongan().compareTo(selectedValue) < 0){
                    selectedValue = listPegawai.get(j).getId_golongan();
                    selectedIndex = j;
                }
            }
            //Swap
            swap(i-1, selectedIndex);
        }
    }
    
    public void selectionSortByName(String sort){
        listPegawai.clear();
        loadData("");
        String selectedValue;
        int j=0;
        int selectedIndex = 0;      
        for(int i=1;i<listPegawai.size();i++){            
            selectedValue = listPegawai.get(i-1).getNama();
            selectedIndex = i-1;
            for(j=i;j<listPegawai.size();j++){
                if(("ASC".equals(sort) ? listPegawai.get(j).getNama().compareTo(selectedValue) < 0 : listPegawai.get(j).getNama().compareTo(selectedValue) > 0 )){
                    selectedValue = listPegawai.get(j).getNama();
                    selectedIndex = j;
                }
            }
            //Swap
            swap(i-1, selectedIndex);
        }
    }
    
    public void swap(int sourceIndex, int destIndex){        
        Object temp = listPegawai.get(destIndex);
        listPegawai.set(destIndex, listPegawai.get(sourceIndex));
        listPegawai.set(sourceIndex, (Pegawai) temp);
    }
    
     /**
     * @param text
     * @param listPegawai 
     * @param searchValue
     * @return
     */
    
    public int compareString(String text, String searchValue){
        int result;
        if (text.contains(searchValue)){
            result = 0;
        }else{
            result = -1;
        }
        return result; 
    }
    
    public int binarySearchByNip(String text, String searchValue){        
        int low = 0;
        int mid = 0;
        int high = listPegawai.size() - 1;
        int result = 0;
        
        while (low <= high) {            
            mid = (low + high) / 2;
            result = compareString(text, searchValue);
            if(result < 0){
                low = mid + 1;
            }else if(result > 0){
                high = mid - 1;
            }else{
                return mid;
            }
        }
        return -1;
    }
    
    public int binarySearchByGolongan(String text, String searchValue){        
        int low = 0;
        int mid = 0;
        int high = listPegawai.size() - 1;
        int result = 0;
        
        while (low <= high) {            
            mid = (low + high) / 2;
            result = compareString(text, searchValue);
            if(result < 0){
                low = mid + 1;
            }else if(result > 0){
                high = mid - 1;
            }else{
                return mid;
            }
        }
        return -1;
    }
    
//     Old
//     public int binarySearchByNip(ArrayList<Pegawai> listPegawai, String searchValue){
//        selectionSortByNip();        
//        int low = 0;
//        int high = listPegawai.size() - 1;
//        int mid = (low + high) / 2;
//
//        while (low <= high && !listPegawai.get(mid).getNip().equalsIgnoreCase(searchValue)) {
//             if (listPegawai.get(mid).compareTo(searchValue) < 0) {
//                low = mid + 1;
//            } else {
//                high = mid - 1;
//            }
//
//            mid = (low + high) / 2;
//            if (low > high) {
//                mid = NOT_FOUND;
//            }
//        }
//        return mid;
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboGolongan;
    private javax.swing.JComboBox<String> comboSortByName;
    private javax.swing.JTextField inputNip;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelNip;
    private javax.swing.JLabel labelNip1;
    private javax.swing.JTable tablePegawai;
    // End of variables declaration//GEN-END:variables
}
